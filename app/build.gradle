plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'com.google.devtools.ksp'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'com.google.dagger.hilt.android'
}

import com.android.build.api.variant.FilterConfiguration
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    namespace 'com.maary.liveinpeace'
    compileSdk 36

    defaultConfig {
        applicationId "com.maary.liveinpeace"
        minSdk 31
        targetSdk 36
        versionCode 5
        versionName "2025.09.07"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
        dataBinding false
        compose true
        buildConfig true
    }

    androidResources {
        generateLocaleConfig true
    }

    flavorDimensions "icon"

    productFlavors {
        iconEnabled {
            dimension "icon"
            manifestPlaceholders = [mainActivityEnabled: "true"]
            buildConfigField "boolean", "ICON_ENABLED", "true"
        }

        iconDisabled {
            dimension "icon"
            manifestPlaceholders = [mainActivityEnabled: "false"]
            buildConfigField "boolean", "ICON_ENABLED", "false"
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            universalApk true
            reset()
            //noinspection ChromeOsAbiSupport
            include "arm64-v8a"
        }
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

//    kotlinOptions {
//        jvmTarget = '11'
//    }
    kotlin {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_11
        }
    }

    androidComponents {
        onVariants(selector().withBuildType("release")) { variant ->
            variant.outputs.each { output ->
                def abiFilter = output.filters.find { it.filterType == FilterConfiguration.FilterType.ABI }
                def abi = abiFilter?.identifier

                def flavorName = variant.flavorName
                def versionName = output.versionName.getOrNull() ?: "unknown"
                def apkName = "" // 先声明一个空变量

                if (abi != null) {
                    // ABI 包的处理逻辑 (if 分支)
                    // 这部分只对 arm64-v8a 包生效
                    apkName = "LiveInPeace-${flavorName}-${abi}-${versionName}.apk"
                    if (abi == "x86_64") { // 虽然当前已移除，但保留逻辑无害
                        apkName = "LiveInPeace-${flavorName}-x64-${versionName}.apk"
                    }
                } else {
                    // 通用包 (Universal) 的处理逻辑 (else 分支)
                    // 当 abi 为 null 时，说明这是 universalApk
                    apkName = "LiveInPeace-${flavorName}-universal-${versionName}.apk"
                }
                output.outputFileName.set(apkName)
            }
        }
    }


}

dependencies {

    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'

    implementation 'androidx.activity:activity-ktx:1.10.1'
    implementation 'androidx.databinding:databinding-runtime:8.13.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.3'
    implementation 'androidx.activity:activity-compose:1.10.1'
    implementation platform('androidx.compose:compose-bom:2025.08.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.4.0-beta03'
    androidTestImplementation platform('androidx.compose:compose-bom:2025.08.01')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.9.3"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.9.3"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.3"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.9.3"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.3'

    implementation "com.google.dagger:hilt-android:2.57.1"
    ksp "com.google.dagger:hilt-compiler:2.57.1"


    implementation "androidx.room:room-runtime:2.7.2"
    annotationProcessor "androidx.room:room-compiler:2.7.2"
    implementation 'androidx.room:room-ktx:2.7.2'
    ksp "androidx.room:room-compiler:2.7.2"

    implementation "androidx.datastore:datastore-preferences:1.2.0-alpha02"

    implementation("com.google.accompanist:accompanist-permissions:0.37.3")
    implementation "androidx.compose.material:material-icons-extended:1.7.8"

    implementation "androidx.work:work-runtime-ktx:2.10.3"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
}